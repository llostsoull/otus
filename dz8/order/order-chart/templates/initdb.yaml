apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
     # This is what defines this resource as a hook. Without this line, the
     # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.fullname" . | quote }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.port | quote }}
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
              do echo waiting for database; sleep 2; done;
      containers:
      - name: post-install-job
        env:
          - name: DATABASE_URI
            value: {{ printf "postgresql://%s:%s@%s:%s/%s" .Values.postgresql.postgresqlUsername .Values.postgresql.postgresqlPassword (include "postgresql.fullname" .) .Values.postgresql.service.port .Values.postgresql.postgresqlDatabase  | quote }}
        image: postgres:latest
        command:
          - sh
          - "-c"
          - |
            psql $DATABASE_URI <<'EOF'
              drop table if exists user_order;
              create table user_order (
                  id SERIAL PRIMARY KEY,
                  user_id integer not null,
                  created timestamptz not null default now(),
                  status varchar default 'Pending',
                  amount integer,
                  address varchar,
                  dt_delivery timestamptz not null
              );
              drop table if exists order_items;
              create table order_items (
                  id SERIAL primary key,
                  key_order integer not null,
                  key_item integer not null,
                  qty integer not null,
                  CONSTRAINT fk_order_items FOREIGN KEY (key_order) 
                  REFERENCES user_order (id) ON DELETE CASCADE ON UPDATE CASCADE
              ); 
            EOF

  backoffLimit: 0
